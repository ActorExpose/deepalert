AWSTemplateFormatVersion: "2010-09-09"
Description: "DeepAlert https://github.com/m-mizutani/deepalert"
Transform: AWS::Serverless-2016-10-31
Parameters:
  # IAM Role ARNs
  LambdaRoleArn:
    Type: String
    Default: ""
  StepFunctionRoleArn:
    Type: String
    Default: ""
  ReviewerLambdaArn:
    Type: String
    Default: ""

  InspectionDelay:
    Type: Number
    Default: 300
  ReviewDelay:
    Type: Number
    Default: 600

Conditions:
  LambdaRoleRequired:
    Fn::Equals: [{ Ref: LambdaRoleArn }, ""]
  StepFunctionRoleRequired:
    Fn::Equals: [{ Ref: StepFunctionRoleArn }, ""]
  NoReviewer:
    Fn::Equals: [{ Ref: ReviewerLambdaArn }, ""]

Globals:
  Function:
    Runtime: go1.x
    CodeUri: build
    Timeout: 30
    MemorySize: 128
    ReservedConcurrentExecutions: 1
    Environment:
      Variables:
        TASK_NOTIFICATION:
          Ref: TaskNotification
        REPORT_NOTIFICATION:
          Ref: ReportNotification
        ERROR_NOTIFICATION:
          Ref: ErrorNotification

Resources:
  # --------------------------------------------------------
  # DynamoDBs
  AlertTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  # --------------------------------------------------------
  # StateMachines
  DelayDispatcher:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName:
        Fn::Sub: "${AWS::StackName}-delay-dispatcher"
      RoleArn:
        Fn::If:
          - StepFunctionRoleRequired
          - { "Fn::GetAtt": StepFunctionRole.Arn }
          - { Ref: StepFunctionRoleArn }
      DefinitionString: !Sub
        - |-
          {"StartAt":"Waiting","States":{"Waiting":{"Type":"Wait","Next":"Exec","Seconds":${InspectionDelay}},"Exec":{"Type":"Task","Resource":"${lambdaArn}","End":true}}}
        - { lambdaArn: { "Fn::GetAtt": DispatchInspection.Arn } }

  ReviewInvoker:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName:
        Fn::Sub: "${AWS::StackName}-review-invoker"
      RoleArn:
        Fn::If:
          - StepFunctionRoleRequired
          - { "Fn::GetAtt": StepFunctionRole.Arn }
          - { Ref: StepFunctionRoleArn }
      DefinitionString: !Sub
        - |-
          {"StartAt":"Wating","States":{"Wating":{"Type":"Wait","Next":"Compiler","Seconds":${ReviewDelay}},"Compiler":{"Type":"Task","Resource":"${compilerArn}","Catch":[{"ErrorEquals":["States.ALL"],"ResultPath":"$.error","Next":"ErrorHandler"}],"Next":"CheckPolicy"},"CheckPolicy":{"Type":"Task","Resource":"${policyLambdaArn}","Catch":[{"ErrorEquals":["States.ALL"],"ResultPath":"$.error","Next":"ErrorHandler"}],"ResultPath":"$.result","Next":"Publish"},"ErrorHandler":{"Type":"Task","Resource":"${errorHandlerArn}","End":true},"Publish":{"Type":"Task","Resource":"${publisherArn}","End":true}}}
        - policyLambdaArn:
            Fn::If:
              - NoReviewer
              - { "Fn::GetAtt": DummyReviewer.Arn }
              - { Ref: ReviewerLambdaArn }
          compilerArn:
            Fn::GetAtt: CompileReport.Arn
          publisherArn:
            Fn::GetAtt: PublishReport.Arn
          errorHandlerArn:
            Fn::GetAtt: ErrorHandler.Arn

  # --------------------------------------------------------
  # Lambda functions
  ReceptAlert:
    Type: AWS::Serverless::Function
    Properties:
      Handler: ReceptAlert
      Role:
        Fn::If:
          - LambdaRoleRequired
          - { "Fn::GetAtt": LambdaRole.Arn }
          - { Ref: LambdaRoleArn }
      Environment:
        Variables:
          ALERT_TABLE:
            Ref: AlertTable
          DISPATCH_MACHINE:
            Ref: DelayDispatcher
          REVIEW_MACHINE:
            Ref: ReviewInvoker
          REPORT_NOTIFICATION:
            Ref: ReportNotification
      Events:
        NotifyTopic:
          Type: SNS
          Properties:
            Topic:
              Ref: AlertNotification

  DispatchInspection:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build
      Handler: DispatchInspection
      Environment:
        Variables:
          TASK_NOTIFICATION:
            Ref: TaskNotification
      Role:
        Fn::If:
          - LambdaRoleRequired
          - { "Fn::GetAtt": LambdaRole.Arn }
          - { Ref: LambdaRoleArn }

  SubmitReport:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build
      Handler: SubmitReport
      Environment:
        Variables:
          ALERT_TABLE:
            Ref: AlertTable
      Role:
        Fn::If:
          - LambdaRoleRequired
          - { "Fn::GetAtt": LambdaRole.Arn }
          - { Ref: LambdaRoleArn }

  CompileReport:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build
      Handler: CompileReport
      Environment:
        Variables:
          ALERT_TABLE:
            Ref: AlertTable
      Role:
        Fn::If:
          - LambdaRoleRequired
          - { "Fn::GetAtt": LambdaRole.Arn }
          - { Ref: LambdaRoleArn }

  PublishReport:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build
      Handler: PublishReport
      Environment:
        Variables:
          REPORT_NOTIFICATION:
            Ref: ReportNotification
      Role:
        Fn::If:
          - LambdaRoleRequired
          - { "Fn::GetAtt": LambdaRole.Arn }
          - { Ref: LambdaRoleArn }

  ErrorHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build
      Handler: ErrorHandler
      Role:
        Fn::If:
          - LambdaRoleRequired
          - { "Fn::GetAtt": LambdaRole.Arn }
          - { Ref: LambdaRoleArn }

  StepFunctionError:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build
      Handler: StepFunctionError
      Role:
        Fn::If:
          - LambdaRoleRequired
          - { "Fn::GetAtt": LambdaRole.Arn }
          - { Ref: LambdaRoleArn }

  DummyReviewer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build
      Handler: DummyReviewer
      Role:
        Fn::If:
          - LambdaRoleRequired
          - { "Fn::GetAtt": LambdaRole.Arn }
          - { Ref: LambdaRoleArn }

  # --------------------------------------------------------
  # SNS topics
  AlertNotification:
    Type: AWS::SNS::Topic

  TaskNotification:
    Type: AWS::SNS::Topic

  SubmitNotification:
    Type: AWS::SNS::Topic

  ErrorNotification:
    Type: AWS::SNS::Topic

  ReportNotification:
    Type: AWS::SNS::Topic

  # --------------------------------------------------------
  # CloudWatch Logs for logging
  LogStore:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: "/DeepAlert/${AWS::StackName}"

  LogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName:
        Ref: LogStore
      LogStreamName: FlowLogs

  # --------------------------------------------------------
  # IAM Roles
  LambdaRole:
    Type: AWS::IAM::Role
    Condition: LambdaRoleRequired
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: ["lambda.amazonaws.com"]
            Action: ["sts:AssumeRole"]
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: "AlertResponderLambdaReviewer"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource:
                  - Fn::GetAtt: AlertTable.Arn
                  - Fn::Sub:
                      - "${TableArn}/index/*"
                      - { TableArn: { "Fn::GetAtt": AlertTable.Arn } }
              - Effect: "Allow"
                Action:
                  - sns:Publish
                Resource:
                  - Ref: ReportNotification
                  - Ref: TaskNotification
                  - Ref: ErrorNotification
              - Effect: "Allow"
                Action:
                  - states:StartExecution
                Resource:
                  - Fn::Sub:
                      - "arn:aws:states:${Region}:${Account}:stateMachine:${StackName}-delay-dispatcher"
                      - StackName: { "Ref": "AWS::StackName" }
                        Region: { "Ref": "AWS::Region" }
                        Account: { "Ref": "AWS::AccountId" }
                  - Fn::Sub:
                      - "arn:aws:states:${Region}:${Account}:stateMachine:${StackName}-review-invoker"
                      - StackName: { "Ref": "AWS::StackName" }
                        Region: { "Ref": "AWS::Region" }
                        Account: { "Ref": "AWS::AccountId" }
        - PolicyName: "LogOutput"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Resource:
                  - Fn::Sub: "arn:aws:logs:${AWS::Region}:*:log-group:${LogStore}"
                  - Fn::Sub: "arn:aws:logs:${AWS::Region}:*:log-group:${LogStore}:*:*"

  StepFunctionRole:
    Type: AWS::IAM::Role
    Condition: StepFunctionRoleRequired
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                Fn::Sub: "states.${AWS::Region}.amazonaws.com"
            Action: ["sts:AssumeRole"]
      Path: "/"
      Policies:
        - PolicyName: "AlertResponderLambdaInvokeReviewer"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - Fn::If:
                      - NoReviewer
                      - { "Fn::GetAtt": DummyReviewer.Arn }
                      - { Ref: ReviewerLambdaArn }
                  - Fn::GetAtt: DispatchInspection.Arn
                  - Fn::GetAtt: StepFunctionError.Arn
                  - Fn::GetAtt: CompileReport.Arn
                  - Fn::GetAtt: PublishReport.Arn

Outputs:
  AlertTopic:
    Value:
      Ref: AlertNotification
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-AlertTopic"
  TaskTopic:
    Value:
      Ref: TaskNotification
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-TaskTopic"
  SubmitTopic:
    Value:
      Ref: SubmitNotification
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-SubmitTopic"
  ReportTopic:
    Value:
      Ref: ReportNotification
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-ReportTopic"
